<?php

namespace AcademicPuma\RestClient\Queries\Put;

use AcademicPuma\RestClient\Authentication\Accessor;
use AcademicPuma\RestClient\Config;
use AcademicPuma\RestClient\Model;
use AcademicPuma\RestClient\Queries;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-06 at 11:45:02.
 */
class ChangePostQueryTest extends TestCase
{

    /**
     * @var  ChangePostQuery
     */
    protected $changePostQuery;

    /**
     * @var string
     */
    private $tagName = 'test-change-post';

    /**
     * @var string
     */
    private $title = 'RestClient Repository Commits';

    /**
     * @var string
     */
    private $url = 'https://bitbucket.org/bibsonomy/restclient-php/commits/all';

    /**
     * @var string
     */
    private $resourceHash;

    /**
     * @var \AcademicPuma\RestClient\Model\Post
     */
    private $post;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {

        global $ACCESSOR_BASICAUTH;

        // At first a post has to be created in order to test the change action afterwards.

        // Init user.
        $user = new Model\User();
        $user->setName(TEST_USER_ID);

        // Init tag.
        $tag = new Model\Tag();
        $tag->setName($this->tagName);

        // Init group.
        $group = new Model\Group();
        $group->setName('private');

        // Init bookmark.
        $bookmark = new Model\Bookmark();
        $bookmark->setTitle('RestClient Repository');
        $bookmark->setUrl('https://bitbucket.org/bibsonomy/restclient-php');

        // Init post.
        $this->post = new Model\Post();
        $this->post->setUser($user);
        $this->post->addTag($tag);
        $this->post->setDescription('Test description.');
        $this->post->setResource($bookmark);
        $this->post->setGroup($group);

        // Create the post.
        $createPostQuery = new Queries\Post\CreatePostQuery($this->post, TEST_USER_ID);
        $createPostQuery->execute($ACCESSOR_BASICAUTH->getClient());

        $resourceHash = $createPostQuery->getResourceHash();
        $bookmark->setIntraHash($resourceHash);

        // Make small changes to the post and check wether they get applied.
        $bookmark->setTitle($this->title);
        $bookmark->setUrl($this->url);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {

        global $ACCESSOR_BASICAUTH;

        $deletePostQuery = new Queries\Delete\DeletePostQuery(TEST_USER_ID, $this->resourceHash);

        // Check status code.
        $statusCode = $deletePostQuery->execute($ACCESSOR_BASICAUTH->getClient())->getStatusCode();
        $this->assertEquals('200', $statusCode);

        // Is executed flag set?
        $this->assertTrue($deletePostQuery->isExecuted());
    }

    /**
     * @dataProvider executeProvider
     *
     * @param Accessor $accessor
     *
     * @throws \AcademicPuma\RestClient\Model\Exceptions\UnsupportedOperationException
     */
    public function testExecute(Accessor $accessor)
    {
        $this->changePostQuery = new ChangePostQuery($this->post, TEST_USER_ID);

        // Execute and check status code.
        $statusCode = $this->changePostQuery->execute($accessor->getClient())->getStatusCode();
        $this->assertEquals('200', $statusCode);

        // Save resource-hash to delete the correct post afterwards.
        $this->resourceHash = $this->changePostQuery->getResourceHash();
        // Is executed flag set?
        $this->assertTrue($this->changePostQuery->isExecuted());

        // Check if the post was created in the expected way.
        $getPostQuery = new Queries\Get\GetPostsQuery(
            Config\Resourcetype::BOOKMARK,
            Config\Grouping::USER,
            TEST_USER_ID,
            [$this->tagName]
        );

        // Execute and check status code.
        $statusCodeGet = $getPostQuery->execute($accessor->getClient())->getStatusCode();
        $this->assertEquals('200', $statusCodeGet);

        // Check type.
        $posts = $getPostQuery->model();
        foreach ($posts as $post) {
            $this->assertTrue($post instanceof Model\Post);
        }

        /** @var \AcademicPuma\RestClient\Model\Post $post */
        $post = $posts[0];

        $this->assertEquals($this->title, $post->getResource()->getTitle());
        $this->assertEquals($this->url, $post->getResource()->getUrl());
    }

    public function executeProvider()
    {

        global $ACCESSOR_OAUTH, $ACCESSOR_BASICAUTH;

        return array(
            array($ACCESSOR_BASICAUTH)
        );
    }
}
