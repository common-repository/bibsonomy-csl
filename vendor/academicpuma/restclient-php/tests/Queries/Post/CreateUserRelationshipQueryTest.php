<?php

namespace AcademicPuma\RestClient\Queries\Post;

use AcademicPuma\RestClient\Config;
use AcademicPuma\RestClient\Model;
use AcademicPuma\RestClient\Queries;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-06 at 11:48:56.
 */
class CreateUserRelationshipQueryTest extends TestCase
{

    /**
     * @var CreateUserRelationshipQuery
     */
    protected $createUserRelationshipQuery;

    private $targetUsername = 'seboettg';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {

        global $ACCESSOR_OAUTH, $ACCESSOR_BASICAUTH;

        // TODO: Does relation have to be deleted?
    }

    /**
     * @dataProvider executeProvider
     */
    public function testExecute($accessor)
    {

        $sourceUser = new Model\User();
        $targetUser = new Model\User();

        $sourceUser->setName(TEST_USER_ID);
        $targetUser->setName($this->targetUsername);

        $this->createUserRelationshipQuery = new CreateUserRelationshipQuery($sourceUser, $targetUser);

        // Check status code.
        $statusCode = $this->createUserRelationshipQuery->execute($accessor->getClient())->getStatusCode();
        $this->assertEquals('201', $statusCode);

        // Is executed flag set?
        $this->assertTrue($this->createUserRelationshipQuery->isExecuted());

        // Check if the relationship was created in the expected way.
        $getFriendsQuery = new Queries\Get\GetFriendsQuery(TEST_USER_ID, Config\RESTConfig::OUTGOING_ATTRIBUTE_VALUE_RELATION);

        // Check status code.
        $statusCodeGet = $getFriendsQuery->execute($accessor->getClient())->getStatusCode();
        $this->assertEquals('200', $statusCodeGet);

        // Check content.
        $expectedXML = '<user name="' . $this->targetUsername . '"';
        $responseBody = $getFriendsQuery->getBody();

        $this->assertContains($expectedXML, $responseBody);

        // Check type.
        $users = $getFriendsQuery->model();
        foreach ($users as $user) {
            $this->assertTrue($user instanceof Model\User);
        }
    }

    public function executeProvider()
    {

        global $ACCESSOR_OAUTH, $ACCESSOR_BASICAUTH;

        return array(
            array($ACCESSOR_BASICAUTH)
        );
    }
}
